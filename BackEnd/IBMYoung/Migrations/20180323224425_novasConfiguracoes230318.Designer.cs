// <auto-generated />
using IBMYoung.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace IBMYoung.Migrations
{
    [DbContext(typeof(ProjectContext))]
    [Migration("20180323224425_novasConfiguracoes230318")]
    partial class novasConfiguracoes230318
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IBMYoung.Model.Alternativa", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("alternativaCorreta");

                    b.Property<int?>("questaoIdID");

                    b.HasKey("ID");

                    b.HasIndex("questaoIdID");

                    b.ToTable("alternativa");
                });

            modelBuilder.Entity("IBMYoung.Model.Aprendiz", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("dataEntrada");

                    b.Property<DateTime>("dataSaida");

                    b.Property<int?>("instituicaoID");

                    b.Property<int>("nivel");

                    b.Property<string>("nome");

                    b.Property<string>("sobrenome");

                    b.Property<int?>("usuarioId");

                    b.HasKey("ID");

                    b.HasIndex("instituicaoID");

                    b.HasIndex("usuarioId");

                    b.ToTable("aprendiz");
                });

            modelBuilder.Entity("IBMYoung.Model.Boletim", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AprendizID");

                    b.Property<int>("anoReferencia");

                    b.Property<DateTime>("dataCadastro");

                    b.Property<float>("frequencia");

                    b.Property<string>("mesReferencia");

                    b.Property<float>("nota");

                    b.Property<string>("observacao");

                    b.HasKey("ID");

                    b.HasIndex("AprendizID");

                    b.ToTable("boletim");
                });

            modelBuilder.Entity("IBMYoung.Model.Funcionario", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("nome");

                    b.Property<int?>("usuarioIdId");

                    b.HasKey("ID");

                    b.HasIndex("usuarioIdId");

                    b.ToTable("funcionario");
                });

            modelBuilder.Entity("IBMYoung.Model.Instituicao", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("nome");

                    b.HasKey("ID");

                    b.ToTable("instituicao");
                });

            modelBuilder.Entity("IBMYoung.Model.Questao", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("conteudo");

                    b.Property<int?>("tarefaIdId");

                    b.Property<string>("titulo");

                    b.HasKey("ID");

                    b.HasIndex("tarefaIdId");

                    b.ToTable("questao");
                });

            modelBuilder.Entity("IBMYoung.Model.Replica", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("dataCriacao");

                    b.Property<string>("texto");

                    b.Property<int?>("topicoIdID");

                    b.HasKey("ID");

                    b.HasIndex("topicoIdID");

                    b.ToTable("replica");
                });

            modelBuilder.Entity("IBMYoung.Model.Tarefa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("active");

                    b.Property<string>("conteudo");

                    b.Property<DateTime>("dataCriacao");

                    b.Property<DateTime>("dataExclusao");

                    b.Property<bool>("entregavel");

                    b.Property<bool>("multEscolha");

                    b.Property<int>("nivel");

                    b.Property<string>("titulo");

                    b.Property<int?>("usuarioId");

                    b.HasKey("Id");

                    b.HasIndex("usuarioId");

                    b.ToTable("tarefa");
                });

            modelBuilder.Entity("IBMYoung.Model.Topico", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("dataCriacao");

                    b.Property<string>("texto");

                    b.Property<string>("titulo");

                    b.HasKey("ID");

                    b.ToTable("topico");
                });

            modelBuilder.Entity("IBMYoung.Model.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("active");

                    b.Property<string>("password")
                        .IsRequired();

                    b.Property<string>("tipo");

                    b.Property<string>("username")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("usuario");
                });

            modelBuilder.Entity("IBMYoung.Model.Alternativa", b =>
                {
                    b.HasOne("IBMYoung.Model.Questao", "questaoId")
                        .WithMany("alternativaId")
                        .HasForeignKey("questaoIdID");
                });

            modelBuilder.Entity("IBMYoung.Model.Aprendiz", b =>
                {
                    b.HasOne("IBMYoung.Model.Instituicao", "instituicao")
                        .WithMany("Aprendizes")
                        .HasForeignKey("instituicaoID");

                    b.HasOne("IBMYoung.Model.Usuario", "usuario")
                        .WithMany()
                        .HasForeignKey("usuarioId");
                });

            modelBuilder.Entity("IBMYoung.Model.Boletim", b =>
                {
                    b.HasOne("IBMYoung.Model.Aprendiz")
                        .WithMany("boletins")
                        .HasForeignKey("AprendizID");
                });

            modelBuilder.Entity("IBMYoung.Model.Funcionario", b =>
                {
                    b.HasOne("IBMYoung.Model.Usuario", "usuarioId")
                        .WithMany()
                        .HasForeignKey("usuarioIdId");
                });

            modelBuilder.Entity("IBMYoung.Model.Questao", b =>
                {
                    b.HasOne("IBMYoung.Model.Tarefa", "tarefaId")
                        .WithMany("questoes")
                        .HasForeignKey("tarefaIdId");
                });

            modelBuilder.Entity("IBMYoung.Model.Replica", b =>
                {
                    b.HasOne("IBMYoung.Model.Topico", "topicoId")
                        .WithMany("replicas")
                        .HasForeignKey("topicoIdID");
                });

            modelBuilder.Entity("IBMYoung.Model.Tarefa", b =>
                {
                    b.HasOne("IBMYoung.Model.Usuario", "usuario")
                        .WithMany("tarefas")
                        .HasForeignKey("usuarioId");
                });
#pragma warning restore 612, 618
        }
    }
}
